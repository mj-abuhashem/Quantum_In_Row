{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/App.svelte",
    "../../src/component/Frame.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { get } from \"svelte/store\";\n  import { playing } from \"./store/index.js\";\n  import Frame from \"./component/Frame.svelte\";\n  import Menu from \"./component/Frame.svelte\";\n  const BACKEND_URL = \"<@BACKEND_URL@>\";\n  export const sayHello = fetch(`${BACKEND_URL}`).then(r => r.text());\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 5rem;\n  }\n  p1 {\n    font-weight: bold;\n    border-radius: 20px;\n    color: #000000;\n    text-transform: uppercase;\n    font-size: 3em;\n    text-align: center;\n  }\n</style>\n\n<main>\n  <div class=\"row flex flex-center \">\n    {#await sayHello}\n      <div class=\"row flex flex-center\">\n        <h1>Loading...</h1>\n      </div>\n    {:then hello}\n      <div class=\"row flex flex-center \">\n        {#if $playing}\n          <Frame />\n        {:else}\n          <div class=\"row flex flex-center\">\n            <h1>{hello}</h1>\n          </div>\n          <Menu />\n        {/if}\n      </div>\n    {:catch error}\n      <p style=\"color: red\">{error.message}</p>\n    {/await}\n  </div>\n</main>\n",
    "<script>\n  import { Board, Player, BROWN_MARKER, GREEN_MARKER } from \"../store/game.js\";\n  import { fly, fade } from \"svelte/transition\";\n  import { elasticOut } from \"svelte/easing\";\n  import { playing } from \"../store/index.js\";\n\n  const PLAYER1 = new Player(\"Red\", BROWN_MARKER);\n  const PLAYER2 = new Player(\"Green\", GREEN_MARKER);\n  let gameBoard = new Board(PLAYER1, { rows: 6, cols: 7 });\n  let activeBoard = gameBoard.getBoard();\n  let winnerName;\n  let superPositionActivated = false;\n  let superPositionColumns = [];\n  let superPositionCount = 0;\n  let activePlayerName = gameBoard.activePlayer.name;\n\n  const BACKEND_URL = \"<@BACKEND_URL@>\";\n\n  const switchActivePlayer = () => {\n    if (gameBoard.activePlayer.name === PLAYER1.name) {\n      gameBoard.setActivePlayer(PLAYER2);\n      activePlayerName = PLAYER2.name;\n    } else {\n      gameBoard.setActivePlayer(PLAYER1);\n      activePlayerName = PLAYER1.name;\n    }\n  };\n  const handleSuperPosition = async ({ rowIndex, colIndex }) => {\n    superPositionActivated = true;\n    if (superPositionActivated) {\n      if (!gameBoard.isColAvailable(colIndex)) {\n        alert(\"column already full\");\n      }\n      const plantedRow = gameBoard.occupySlotWithSuperPosition({\n        superPositionCount,\n        rowIndex,\n        colIndex\n      });\n      superPositionColumns.push({ R: plantedRow, C: colIndex });\n\n      if (superPositionColumns.length === 2) {\n        gameBoard.addSuperPosition(superPositionColumns);\n        superPositionActivated = false;\n        superPositionColumns = [];\n        superPositionCount++;\n        switchActivePlayer();\n      }\n    }\n\n  };\n\n  const handlePlayerMove = async ({ rowIndex, colIndex }) => {\n    if (!gameBoard.isColAvailable(colIndex)) {\n      alert(\"column already full\");\n      return;\n    }\n\n    if (await canProceed()) {\n      if (superPositionActivated) {\n        handleSuperPosition({ rowIndex, colIndex });\n      } else {\n        gameBoard.occupySlot({ rowIndex, colIndex });\n        switchActivePlayer();\n      }\n      activeBoard = [...gameBoard.getBoard()];\n    }\n    await canProceed();\n  };\n  const canProceed = async () => {\n    let winner = gameBoard.hasPlayerWon();\n    if (gameBoard.isFull()) {\n      if (!winner) {\n        quantumGate = await computeCollapse();\n        gameBoard.applyQuantumGate(quantumGate);\n\n        winner = gameBoard.hasPlayerWon();\n        if (!winner) {\n          return false;\n        }\n      }\n    }\n\n    winner = gameBoard.hasPlayerWon();\n    if (winner) {\n      if (PLAYER1.marker === winner) {\n        winnerName = PLAYER1.name;\n      } else {\n        winnerName = PLAYER2.name;\n      }\n      return false;\n    }\n    return true;\n  };\n\n  const computeCollapse = async () => {\n    const payload = { super_positions: gameBoard.superPositions.length };\n    const res = await fetch(`${BACKEND_URL}/collapse`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    })\n      .then(async response => {\n        if (response.ok) {\n          const data = await response.json();\n          return data.res;\n        } else return \"\";\n      })\n      .catch(error => {\n        return Promise.reject(error);\n      });\n    return res;\n  };\n\n  const collapseForPlayer = async () => {\n    let quantumGate = await computeCollapse();\n    gameBoard.applyQuantumGate(quantumGate);\n    gameBoard.applyQuantumGate(quantumGate);\n\n    activeBoard = [...gameBoard.getBoard()];\n\n    if (await canProceed()) switchActivePlayer();\n  };\n\n</script>\n<style>\n  .GREEN {\n    background: green;\n  }\n  .BROWN {\n    background: brown;\n  }\n  .superGREEN {\n    background: blue;\n  }\n  .superBROWN {\n    background:blue;\n  }\n  .circle {\n    border-radius: 20%;\n    -moz-border-radius: 20%;\n    -webkit-border-radius: 20%;\n    width: 5rem;\n    height: 5rem;\n    border: 2px solid black;\n  }\n  .empty {\n    background: lightgray;\n  }\n  h2 {\n    text-align: center;\n  }\n  .big-btn {\n    margin-left: 0rem;\n    width: 40rem;\n    font-size: 2rem;\n  }\n</style>\n<div>\n  {#if winnerName}\n    <div class=\"flex flex-center\">\n      <h2\n        style=\"margin-left:7rem;color:pink;\"\n        \n        out:fade>\n        {winnerName} Won!\n      </h2>\n    </div>\n  {:else}\n    <div class=\"flex flex-center\">\n      <h2 \n      style=\"margin-left: 0rem;color:{activePlayerName === 'PLAYER2' ? 'red' : 'black'}\">\n        {activePlayerName}'s turn \n      </h2>\n    </div>\n    {#if superPositionActivated}\n      <div class=\"flex flex-center\" style=\"margin-left:7rem;color:blue\">\n        <h4>Superposition is Active</h4>\n      </div>\n    {:else}\n      <div class=\"flex flex-center\" >\n        <button \n        on:click={() => (superPositionActivated = true)}\n        class=\"big-btn\"  style=\"background-color: white; color: black;\" >\n        Activate Quantum Move \n      </button>\n      </div>\n    {/if}\n  {/if}\n<center>\n  <div class=\"column padding-all-1 flex flex-center\" >\n    <div>\n      <table width=\"50vW\" height=\"50vH\">\n        <tbody>\n          {#each activeBoard as rows, rowIndex}\n            <tr>\n              {#each rows as column, colIndex}\n                <td\n                  id={'R' + rowIndex + 'C' + colIndex}\n                  on:click={() => handlePlayerMove({ colIndex, rowIndex })}>\n                  {#if column === GREEN_MARKER}\n                    <div\n                      class=\"circle GREEN\"\n                       />\n                  {:else if column === BROWN_MARKER}\n                    <div\n                      class=\"circle BROWN\"\n                       />\n                  {:else if column.includes(GREEN_MARKER)}\n                    <div\n                      class=\"circle superGREEN\"\n                     />\n                  {:else if column.includes(BROWN_MARKER)}\n                    <div\n                      class=\"circle superBROWN\"\n                      />\n                  {:else}\n                    <div class=\"circle empty\" />\n                  {/if}\n                </td>\n              {/each}\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  </div>\n</center>\n  <button\n    on:click={collapseForPlayer}\n    hidden={superPositionCount <= 0 || winnerName}\n    class=\"big-btn\" style=\"background-color: white; color: black;\"  >\n    Collapse \n  </button>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAUE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,AACf,CAAC;ACmHD,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,WAAW,cAAC,CAAC,AACX,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,WAAW,cAAC,CAAC,AACX,WAAW,IAAI,AACjB,CAAC,AACD,OAAO,cAAC,CAAC,AACP,aAAa,CAAE,GAAG,CAClB,kBAAkB,CAAE,GAAG,CACvB,qBAAqB,CAAE,GAAG,CAC1B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AACzB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,SAAS,AACvB,CAAC,AACD,EAAE,cAAC,CAAC,AACF,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,AACjB,CAAC"
}